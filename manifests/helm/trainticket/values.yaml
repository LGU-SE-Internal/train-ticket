global:
  image:
    repository: docker.io/opspai
    tag: latest
  port: 8080
  monitoring: "opentelemetry" 
  # otelcollector: "http://opentelemetry-collector-deployment.monitoring:4317"

opentelemetry:
  enabled: true
  image: autoinstrumentation-java:elastic

services:
  tsAdminBasicInfoService:
    name: ts-admin-basic-info-service
    secretRef: ts-admin-basic-info-service
  tsAdminOrderService:
    name: ts-admin-order-service
    secretRef: ts-admin-order-service
  tsAdminRouteService:
    name: ts-admin-route-service
    secretRef: ts-admin-route-service
  tsAdminTravelService:
    name: ts-admin-travel-service
    secretRef: ts-admin-travel-service
  tsAdminUserService:
    name: ts-admin-user-service
    secretRef: ts-admin-user-service
  tsAssuranceService:
    name: ts-assurance-service
    secretRef: ts-assurance-service
  tsAuthService:
    name: ts-auth-service
    secretRef: ts-auth-service
  tsAvatarService:
    name: ts-avatar-service
    secretRef: ts-avatar-service
    lang: python
  tsBasicService:
    name: ts-basic-service
    secretRef: ts-basic-service
  tsCancelService:
    name: ts-cancel-service
    secretRef: ts-cancel-service
  tsConfigService:
    name: ts-config-service
    secretRef: ts-config-service
  tsConsignPriceService:
    name: ts-consign-price-service
    secretRef: ts-consign-price-service
  tsConsignService:
    name: ts-consign-service
    secretRef: ts-consign-service
  tsContactsService:
    name: ts-contacts-service
    secretRef: ts-contacts-service
  tsDeliveryService:
    name: ts-delivery-service
    secretRef: ts-delivery-service
  tsExecuteService:
    name: ts-execute-service
    secretRef: ts-execute-service
  tsFoodDeliveryService:
    name: ts-food-delivery-service
    secretRef: ts-food-delivery-service
  tsFoodService:
    name: ts-food-service
    secretRef: ts-food-service
  tsGatewayService:
    name: ts-gateway-service
    secretRef: ts-gateway-service
  tsInsidePaymentService:
    name: ts-inside-payment-service
    secretRef: ts-inside-payment-service
  tsNewsService:
    name: ts-news-service
    secretRef: ts-news-service
    lang: golang
  tsNotificationService:
    name: ts-notification-service
    secretRef: ts-notification-service
  tsOrderOtherService:
    name: ts-order-other-service
    secretRef: ts-order-other-service
  tsOrderService:
    name: ts-order-service
    secretRef: ts-order-service
    resources:
      requests:
        cpu: 2
        memory: 2Gi
      limits:
        cpu: 4
        memory: 4Gi
  tsPaymentService:
    name: ts-payment-service
    secretRef: ts-payment-service
  tsPreserveOtherService:
    name: ts-preserve-other-service
    secretRef: ts-preserve-other-service
  tsPreserveService:
    name: ts-preserve-service
    secretRef: ts-preserve-service
  tsPriceService:
    name: ts-price-service
    secretRef: ts-price-service
  tsRebookService:
    name: ts-rebook-service
    secretRef: ts-rebook-service
  tsRoutePlanService:
    name: ts-route-plan-service
    secretRef: ts-route-plan-service
  tsRouteService:
    name: ts-route-service
    secretRef: ts-route-service
  tsSeatService:
    name: ts-seat-service
    secretRef: ts-seat-service
  tsSecurityService:
    name: ts-security-service
    secretRef: ts-security-service
  tsStationFoodService:
    name: ts-station-food-service
    secretRef: ts-station-food-service
  tsStationService:
    name: ts-station-service
    secretRef: ts-station-service
  tsTicketOfficeService:
    name: ts-ticket-office-service
    secretRef: ts-ticket-office-service
    lang: javascript
  tsTrainFoodService:
    name: ts-train-food-service
    secretRef: ts-train-food-service
  tsTrainService:
    name: ts-train-service
    secretRef: ts-train-service
  tsTravelPlanService:
    name: ts-travel-plan-service
    secretRef: ts-travel-plan-service
  tsTravelService:
    name: ts-travel-service
    secretRef: ts-travel-service
  tsTravel2Service:
    name: ts-travel2-service
    secretRef: ts-travel2-service
  tsUiDashboard:
    name: ts-ui-dashboard
    secretRef: ts-ui-dashboard
    type: NodePort
    nodePort: 30080
    lang: frontend
  tsUserService:
    name: ts-user-service
    secretRef: ts-user-service
  tsVerificationCodeService:
    name: ts-verification-code-service
    secretRef: ts-verification-code-service
  tsVoucherService:
    name: ts-voucher-service
    secretRef: ts-voucher-service
    lang: python
  tsWaitOrderService:
    name: ts-wait-order-service
    secretRef: ts-wait-order-service

resources:
  requests:
    cpu: 1
    memory: 1Gi
  limits:
    cpu: 5
    memory: 3Gi

# Example of how to specify service-specific resources
# services:
#   tsServiceName:
#     name: ts-service-name
#     secretRef: ts-service-name
#     resources:
#       requests:
#         cpu: 1
#         memory: 512Mi
#       limits:
#         cpu: 2
#         memory: 1Gi

mysql:
  enabled: true
  image: mysql:5.7
  rootPassword: "yourpassword"
  host: "mysql"
  port: "3306"
  database: "ts"
  user: "root"
  password: "yourpassword"
  maxConnections: 1024
  persistence:
    enabled: false
    # existingClaim: mysql-pvc
  service:
    type: NodePort
    port: 3306
    # nodePort: 30306

# RabbitMQ Configuration
rabbitmq:
  enabled: true
  fullnameOverride: "rabbitmq"
  podLabels: {app: ts-rabbitmq}
  auth:
    username: guest   # Using the default RabbitMQ username
    password: guest   # Using the default RabbitMQ password
    erlangCookie: "RABBITMQCOOKIE"  # A simple cookie value
  service:
    type: ClusterIP
  persistence:
    enabled: false    # Disabling persistence makes it stateless
  resources:
    requests:
      memory: 256Mi
      cpu: 100m
    limits:
      memory: 1Gi
      cpu: 1000m
  metrics:
    enabled: false
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: disk
            operator: In
            values:
            - ssd
# Loadgenerator Configuration
loadgenerator:
  enabled: true
  fullnameOverride: "loadgenerator"
  baseURL: "http://ts-ui-dashboard:8080"
  opentelemetry:
    endpoint: "opentelemetry-collector-deployment.monitoring:4317"
  image:
    repository: docker.io/opspai/loadgenerator
    pullPolicy: IfNotPresent
    tag: "018"
  config:
    threads: 2
    sleep: 100
    debug: false
  waitForServices:
    enabled: true
    timeout: 600  
    checkInterval: 1
    services:
      - name: ts-auth-service
        port: 8080
        path: "/api/v1/auth"
      - name: ts-user-service
        port: 8080
        path: "/api/v1/userservice/users"
      - name: ts-order-service
        port: 8080
        path: "/api/v1/orderservice"
      - name: ts-travel-service
        port: 8080
        path: "/api/v1/travelservice"
      - name: ts-travel2-service
        port: 8080
        path: "/api/v1/travel2service"
      - name: ts-preserve-service
        port: 8080
        path: "/api/v1/preserveservice"
      - name: ts-basic-service
        port: 8080
        path: "/api/v1/basicservice"
      - name: ts-station-service
        port: 8080
        path: "/api/v1/stationservice"
      - name: ts-train-service
        port: 8080
        path: "/api/v1/trainservice"
      - name: ts-route-service
        port: 8080
        path: "/api/v1/routeservice"
      - name: ts-price-service
        port: 8080
        path: "/api/v1/priceservice"
      - name: ts-seat-service
        port: 8080
        path: "/api/v1/seatservice"
      - name: ts-security-service
        port: 8080
        path: "/api/v1/securityservice"
      - name: ts-payment-service
        port: 8080
        path: "/api/v1/paymentservice"
      - name: ts-admin-basic-info-service
        port: 8080
        path: "/api/v1/adminbasicservice"
      - name: ts-admin-order-service
        port: 8080
        path: "/api/v1/adminorderservice"
      - name: ts-admin-route-service
        port: 8080
        path: "/api/v1/adminrouteservice"
      - name: ts-admin-travel-service
        port: 8080
        path: "/api/v1/admintravelservice"
      - name: ts-admin-user-service
        port: 8080
        path: "/api/v1/adminuserservice/users"
      - name: ts-assurance-service
        port: 8080
        path: "/api/v1/assuranceservice"
      - name: ts-avatar-service
        port: 8080
        path: "/api/v1/avatar"
      - name: ts-cancel-service
        port: 8080
        path: "/api/v1/cancelservice"
      - name: ts-config-service
        port: 8080
        path: "/api/v1/configservice"
      - name: ts-consign-price-service
        port: 8080
        path: "/api/v1/consignpriceservice"
      - name: ts-consign-service
        port: 8080
        path: "/api/v1/consignservice"
      - name: ts-contacts-service
        port: 8080
        path: "/api/v1/contactservice"
      - name: ts-execute-service
        port: 8080
        path: "/api/v1/executeservice"
      - name: ts-food-service
        port: 8080
        path: "/api/v1/foodservice"
      - name: ts-inside-payment-service
        port: 8080
        path: "/api/v1/inside_pay_service"
      - name: ts-notification-service
        port: 8080
        path: "/api/v1/notifyservice"
      - name: ts-order-other-service
        port: 8080
        path: "/api/v1/orderOtherService"
      - name: ts-preserve-other-service
        port: 8080
        path: "/api/v1/preserveotherservice"
      - name: ts-rebook-service
        port: 8080
        path: "/api/v1/rebookservice"
      - name: ts-route-plan-service
        port: 8080
        path: "/api/v1/routeplanservice"
      - name: ts-station-food-service
        port: 8080
        path: "/api/v1/stationfoodservice"
      - name: ts-train-food-service
        port: 8080
        path: "/api/v1/trainfoodservice"
      - name: ts-travel-plan-service
        port: 8080
        path: "/api/v1/travelplanservice"
      - name: ts-verification-code-service
        port: 8080
        path: "/api/v1/verifycode"
      - name: ts-wait-order-service
        port: 8080
        path: "/api/v1/waitorderservice"
      - name: ts-food-delivery-service
        port: 8080
        path: "/api/v1/fooddeliveryservice"
      - name: mysql
        port: 3306
      - name: rabbitmq
        port: 5672

  initContainer:
    image: docker.io/nicolaka/netshoot:v0.14
    resources:
      requests:
        cpu: 10m
        memory: 32Mi
      limits:
        cpu: 100m
        memory: 128Mi